plugins {
	id 'java-library'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'maven-publish'
}

group = 'etri'
version = '0.0'

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
	main {
		java {
			srcDirs 'src/main/antlr/'
		}
	}
}

repositories {
    mavenLocal()
	maven {
		url "http://repo.osgeo.org/repository/release/"
		allowInsecureProtocol = true
	}
	mavenCentral()
}

ext {
	log4j_version = '2.18.0'
	picocli_version = '3.9.6'
	
	geotools_version = '26.1'
	beanutils_version = '1.9.4'
	snappy_version = '1.1.8.4'
	
	scala_version = '2.12'
	spark_version = '3.1.3'
	hadoop_version = '2.7.3'
}

dependencies {
	implementation project(":utils")
	implementation project(":utils.geo")
	
	// command line parser
	implementation "info.picocli:picocli:${picocli_version}"
	
	// Log4j2 & SLF4j bridge
	implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
	implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
	implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
	
	// GeoTools
	implementation "org.geotools:gt-geojson:${geotools_version}"
	
	implementation "org.xerial.snappy:snappy-java:${snappy_version}"
	
	implementation files('lib/javaGeom-0.11.2.jar')
	implementation fileTree(dir: 'lib/spark_jars', include: '*.jar')
}

shadowJar {
	classifier 'all'
	
	zip64 true
	mergeServiceFiles()
	
	transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
	
	dependencies {
		exclude(dependency("org.apache.spark:.*:"))
		exclude(dependency("org.spark-project:.*:"))
		exclude(dependency("org.scala-lang:.*:"))
		exclude(dependency("org.apache.avro:.*:"))
		exclude(dependency("org.apache.commons:.*:"))
		exclude(dependency("org.apache.curator:.*:"))
		exclude(dependency("org.apache.derby:.*:"))
		exclude(dependency("org.apache.hadoop:.*:"))
		exclude(dependency("org.apache.hive:.*:"))
		exclude(dependency("org.apache.hive.shims:.*:"))
		exclude(dependency("org.apache.kerby:.*:"))
		exclude(dependency("org.apache.thrift:.*:"))
		exclude(dependency("org.apache.xbean:.*:"))
		exclude(dependency("org.datanucleus:.*:"))
		exclude(dependency("org.codehaus.jackson:.*:"))
		exclude(dependency("org.eclipse.jetty:.*:"))
		exclude(dependency("org.tukaani:.*:"))
		exclude(dependency("org.xerial.snappy:.*:"))
		exclude(dependency("commons-beanutils:.*:"))
		exclude(dependency("commons-codec:.*:"))
		exclude(dependency("commons-dbcp:.*:"))
		exclude(dependency("commons-lang:.*:"))
		exclude(dependency("commons-pool:.*:"))
		exclude(dependency("com.esotericsoftware:.*:"))
		exclude(dependency("com.google.protobuf:.*:"))
		exclude(dependency("com.sun.jersey:.*:"))
		exclude(dependency("com.thoughtworks.paranamer:.*:"))
		exclude(dependency("com.twitter:.*:"))
		exclude(dependency("com.univocity:.*:"))
		exclude(dependency("io.dropwizard.metrics:.*:"))
		exclude(dependency("org.slf4j:.*:"))
	}
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		marmotClient(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

ext.distDir = "${System.env.HOME}/tmp/jarvey.dist"
task distributeBinary(type:Copy) {
	dependsOn assemble
	into "${distDir}"
	from ("${projectDir}") {
		include 'bin/**'
		include 'lib/**'
		include '.gitignore'
	}
	from "${buildDir}/libs/${archivesBaseName}-${version}-javadoc.jar"
}
